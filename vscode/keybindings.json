{
  /*
  üßë AUTHOR:      Stanley Varga
  üßë‚Äçüíª GITHUB:      https://github.com/stanleyvarga
  üóìÔ∏è Created:     28.01.2023
  üì¢ DESCRIPTION: Below is my lovely VSCode config ü§ó

 ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚†¥‚†ö‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†ì‚†¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
 ‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†é‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ì‚¢§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
 ‚†Ä‚†Ä‚¢Ä‚°û‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢¢‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
 ‚†Ä‚£º‚†Ä‚†Ä‚†Ä‚†Ä‚†∞‚†¶‚†§‚£§‚£Ä‚£à‚£â‚£â‚£õ‚£í‚†∂‚†¶‚†§‚£§‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢≥‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä ‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°§‚†¥‚†í‚†í‚†∂‚¢§‚£Ñ‚£Ä‚°â‚†â‚†ì‚†¶‚£§‚£Ä‚£à‚£â‚£ì‚†≤‚¢§‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢≥‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
 ‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†ô‚†ì‚†í‚†∂‚†§‚£§‚£Ä‚£â‚£ô‚£í‚†¶‚¢≠‚£ô‚°í‚†¶‚£Ñ‚†à‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
 ‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚†¥‚†ñ‚†í‚†í‚†≤‚†∂‚†¶‚†§‚¢Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†â‚†â‚†ì‚†≤‚†â‚†Ä‚†Ä‚†Ä‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
 ‚£º‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
 ‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚°Ä‚†Ä‚†≥‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†¥‚†í‚†í‚†í‚†≤‚†§‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
 ‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ß‚£Ω‚£ø‚£ø‚°õ‚¢Æ‚£∑‚†Ä‚°∂‚†Ä‚†Ä‚¢∏‚£Ä‚°§‚¢¥‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢¶‚†Ä‚¢∏‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
 ‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†ô‚†õ‚†ã‚†Ä‚¢Ä‚°á‚†Ä‚†Ä‚°ø‚£¥‚†ö‚£ø‚£ø‚£ø‚°ü‚£¶‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä   ‚åú    ‚åù  
 ‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚†É‚†Ä‚¢Ä‚°á‚†à‚†ì‚†ª‚†ø‚†ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚¢∞‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä     üñï
 ‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°ü‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä   ‚åû    ‚åü
 ‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°¥‚†ã‚†Ä‚†Ä‚†Ä‚†ò‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£§‚†§‚†¥‚†ä‚£π     
‚£ß‚£ø‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°æ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚†§‚†¥‚†û‚†â‚†Ä‚†Ä‚†Ä‚£¥‚†ö‚†ë   
‚°è‚£Ω‚£á‚£∂‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚†õ‚†â‚†≥‚°∂‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚°ß‚†∂‚†∂‚†í‚†õ‚†õ‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢æ‚†Ä‚†Ä
‚°∑‚£ø‚£Ω‚£ø‚£∫‚£ß‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†Ä‚£∂‚†Ä‚¢Ä‚°∂‚£§‚°Ñ‚¢¢‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£§‚£Ω‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢≥‚°Ä
‚°á‚£Ø‚°è‚£ø‚£æ‚£ø‚£Ø‚°Å‚†Ä‚°Ä‚°æ‚†Ä‚£∂‚°ü‚†Ä‚£ª‚£§‚£§‚£º‚£Ω‚£ß‚†Ä‚¢ø‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚£π‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°¥‚†ñ‚†í‚†∂‚†æ‚†∑
‚°á‚£á‚†¥‚£ø‚£Ø‚°Ω‚†á‚¢ª‚†≤‚£ø‚°ß‚†ò‚¢©‚£≠‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚°õ‚£Ü‚†ê‚£¶‚°º‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°¥‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚°á‚†Ä‚†Ä‚†ô‚£ø‚£∑‚£º‚†ö‚£Ü‚£Ø‚†Ä‚†Ä‚†∏‚£ü‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚†ò‚£ø‚£º‚¢¶‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†ñ‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚°á‚†Ä‚†Ä‚†Ä‚†∏‚£ø‚£ø‚£¶‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢é‚†õ‚†ø‚†ø‚¢ø‚£ø‚°ø‚†Ä‚¢∏‚£ª‚£ª‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°¥‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†Ø‚¢ø‚£ø‚£É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†≤‚†∂‚†∂‚†õ‚†Å‚¢Ä‚¢∏‚°ø‚†É‚†à‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†û‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†æ‚£ø‚†ª‚£ß‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚¢Ñ‚£º‚°ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†û‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†õ‚†õ‚£∑‚£æ‚£ß‚£Ω‚£∑‚£§‚£¥‚£∑‚°ü‚†©‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°¥‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£í‚°ã‚¢ô‚¢õ‚¢ø‚¢â‚°Ω‚†Ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚†ñ‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä

===============================================================================
 üìë TABLE OF CONTENTS
===============================================================================
  - VSCode Settings
    * Suggestions
    * AutoSave
    * Breadcrumbs
    * Brackets highlight
    * Terminal
  - Editing Experience
    * Formatting
  - VIM
  - Typography
  - Other
    * CodeMetrics Extension Settings
  - Language Specific Settings
  - File Associations
===============================================================================
 üíÅ FANCY TIPS
===============================================================================
  * acceptAlternativeSelectedSuggestion
    This will enable you to map `;` and accept the suggestion with much 
    less distance for your hands to travel (default is enter) üß≥
  * Remap `selectPrevSuggestion` & `selectNextSuggestion` to `j` and `k` 
      This will improve your life dramatically, as you do not have to reach
      to arrows.
  * Forget about Return (Backspace)
    If you use VIM extension or simply you have too far to reach to when
    using Return, simply remap it to `cmd` + `;` so that you can
    always reach it from homerow position. 
    * `X` -> delete left
    * `x` -> delete right
===============================================================================
 üß™ Ongoing Experiments
===============================================================================
  * Experiment to see whether showing complexity message
    under 8 is good or not
    "codemetrics.basics.CodeLensHiddenUnder": 8,   
  * suggest locality bonus
    I'm not sure yet whether I like it or not
  * "editor.wordSeparators": "`~!@#$%^&*()=+[{]}\\|;:'\",.<>/?",
    Trying whether I like words such as 
    - `this.is.a.word` 
    - `this-is-a-word`
    - `this_is_a_word`
    treated as one word
  * "editor.cursorSurroundingLines": 0,
    Unfortunatelly, this setting does not work correctly with ctrl+j/k
    when set, scrolling gets reset to the position where you started*/

  /*
===============================================================================
 üñåÔ∏è Typography 
===============================================================================
 üî† Cascadia
=============================================================================*/
  // Or 'Cascadia Mono' for monospaced font without ligatures
  "editor.fontFamily": "'Cascadia Code'",
  "editor.fontSize": 14,
  "editor.lineHeight": 22,
  // ss01 - Italics
  // ss19 - Slashed zero
  "editor.fontLigatures": "'ss02', 'ss03', 'ss20'",
  /*
===============================================================================
 üî† Fira Code
=============================================================================*/
  // "editor.fontFamily": "'Fira Code', monospace",
  // "editor.fontSize": 14,
  // "editor.lineHeight": 22,
  // "editor.fontLigatures": "'cv25', 'cv26', 'cv28','cv32', 'cv27', 'ss09', 'cv31', 'cv30', 'cv18', 'cv14', 'cv05', 'cv09', 'cv13', 'calt', 'liga', 'ss02', 'ss05', 'ss07'",
  // Cool ligatures
  // {. .} .- .= []
  /*
===============================================================================
 üî† Twilio Sans Mono
=============================================================================*/
  // "editor.fontFamily": "Twilio Sans Mono",
  // "editor.fontFamily": "Rec Mono Linear",
  // "editor.fontWeight": "450",
  // "editor.fontSize": 13,
  // "editor.lineHeight": 20,
  // "editor.fontLigatures": true,
  /*
===============================================================================
 üî† Monaspace
=============================================================================*/
  // "editor.fontFamily": "'Monaspace Argon', monospace",
  // "editor.fontFamily": "'Monaspace Neon', monospace",
  // "editor.fontFamily": "'Monaspace Xenon', monospace", // Code is a poetry
  // "editor.fontSize": 14,
  // "editor.lineHeight": 22,
  // "editor.fontLigatures": "'calt', 'ss01', 'ss02', 'ss03', 'ss04', 'ss05', 'ss06', 'ss07', 'ss08', 'ss09', 'liga'",
  /*
===============================================================================
 üî† JetBrains Mono
=============================================================================*/
  // "editor.fontFamily": "JetBrains Mono",
  // "editor.fontSize": 14,
  // "editor.lineHeight": 22,
  // "editor.fontLigatures": true,
  /*
===============================================================================
 üî† IBM Plex Mono
=============================================================================*/
  // "editor.fontFamily": "IBM Plex Mono",
  // "editor.fontSize": 14,
  // "editor.lineHeight": 22,
  // "editor.fontLigatures": true,
  /*
===============================================================================
 üî† 0xProto
=============================================================================*/
  // "editor.fontFamily": "'0xProto', monospace",
  // "editor.fontSize": 14,
  // "editor.lineHeight": 21,
  // All except ss01
  // "editor.fontLigatures": "'calt', 'liga', 'ss02', 'ss03', 'ss04', 'ss05', 'ss06', 'ss07', 'ss08'",
  /*
===============================================================================
 üî† Consolas
=============================================================================*/
  // "editor.fontFamily": "Consolas, monospace",
  // "editor.fontSize": 14,
  // "editor.lineHeight": 22,
  /*
===============================================================================
 üî† Gitlab Mono
=============================================================================*/
  // "editor.fontFamily": "'Gitlab Mono', monospace",
  // "editor.fontSize": 14,
  // "editor.lineHeight": 21,
  // "editor.fontLigatures": true,
  /*
===============================================================================
 üî† Mononoki
=============================================================================*/
  // "editor.fontFamily": "'Mononoki', monospace",
  // "editor.fontSize": 14,
  // "editor.lineHeight": 22,
  /*
===============================================================================
 üî† Input Mono
=============================================================================*/
  // "editor.fontFamily": "Input Mono",
  // "editor.letterSpacing": 0.15,
  // "editor.fontSize": 14,
  /*
===============================================================================
 üî† Monospace
=============================================================================*/
  // "editor.fontFamily": "monospace, serif",
  // "editor.fontSize": 14,
  // "editor.lineHeight": 22,
  /*
===============================================================================
 üë®‚Äçüíª VSCode:Settings 
=============================================================================*/
  "explorer.confirmDelete": false,
  "explorer.confirmDragAndDrop": false,
  "editor.multiCursorModifier": "ctrlCmd",
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit",
    "source.fixAll": "explicit",
    "source.organizeImports": "explicit"
  },
  // üë®‚Äçüíª VSCode:Suggestions
  "editor.wordBasedSuggestions": "matchingDocuments",
  "editor.quickSuggestions": {
    "other": "on",
    // IMPORTANT: This setting is here only for Vuetify (which I truly hate from the depth of my heart), so that intellisense works in double quotes
    "strings": true,
    "comments": false
  },
  "editor.suggestFontSize": 13, // üç≠ 13 is the perfect sweetspot
  "editor.suggestLineHeight": 25, // I like to slightly increase suggestions list line height. Very slightly
  "editor.acceptSuggestionOnEnter": "smart",
  "editor.suggest.localityBonus": false, // üß™ Experiment - Controls whether sorting favours words that appear close to the cursor
  "editor.snippetSuggestions": "inline", // Most important. Determines suggestions order.
  // üíæ VSCode:AutoSave
  "files.autoSave": "afterDelay", // Save yourself from pressing <COMMAND> + <S> hundreds of times per da
  "files.autoSaveDelay": 500,
  "files.refactoring.autoSave": true,
  // üçû VSCode:Breadcrumbs
  "breadcrumbs.filePath": "on",
  "breadcrumbs.symbolPath": "off",
  // üî¶ VSCode:Brackets Highlight
  "editor.guides.bracketPairs": true,
  "editor.guides.highlightActiveBracketPair": true,
  "editor.guides.bracketPairsHorizontal": "active", // This gives horizontal highlight and I personally like it to be set on "active" as it removes some highlight clutter away
  "editor.guides.highlightActiveIndentation": false,

  "window.titleSeparator": " üßë‚ÄçüöÄ ", // also good ‚ö°Ô∏é üëâ üí© üëæ ü§ñ üí¨ üëÄ üßë‚Äçüíª üßë‚ÄçüöÄ ü•∑ üßô üéÑ üéÉ ‚ú® ü•ä üõ∏ üöÄ ‚úèÔ∏è ü™É üî≠ ¬ª ‚ÜØ ‚àò ‚àô ‚äπ ‚åò ‚öõÔ∏é ‚öîÔ∏é ‚õèÔ∏é
  "window.titleBarStyle": "custom",
  "window.title": "${rootNameShort}${separator}${activeEditorShort}",
  "editor.renderLineHighlight": "all", // Highlight line and gutter alike ‚ù§Ô∏è‚Äçüî•
  "editor.renderLineHighlightOnlyWhenFocus": false,
  "editor.roundedSelection": true,
  "editor.scrollbar.horizontalScrollbarSize": 5, // Tiny scrollbar size
  "editor.scrollbar.verticalScrollbarSize": 8,
  "editor.scrollBeyondLastLine": false, // This avoids so much whitespace on file end
  "editor.smoothScrolling": true,
  "workbench.sideBar.location": "right",
  "editor.padding.top": 0,
  "editor.lineNumbers": "relative", // Since i'm using VIM extension, I want relative numbers
  "editor.cursorBlinking": "expand", // üëÄ Expand with line option will sprinkle your editing by cute animation that is a sight to see
  "editor.cursorStyle": "line",
  "editor.fastScrollSensitivity": 5, // üìú When pressing <Option> you can scroll 5x the speed of regular scroll
  "editor.minimap.enabled": false, // üó∫Ô∏è In general I dislike minimap, but in some cases, having it "autohide" on right makes sense.
  "editor.minimap.autohide": true,
  "editor.minimap.side": "right",
  "editor.minimap.size": "proportional", //  üó∫Ô∏è Proportions of your line-height and font-size will be reflected on mini-map
  "editor.minimap.maxColumn": 80, // üòä 80 columns is the perfect width. It's not too noisy and still looks cool
  "editor.tabSize": 2,
  "workbench.tips.enabled": true, // üßë‚Äçüéì I suggest this setting as you can always learn more about new settings
  // Disabled glyphMargin for all files, except [json]
  // in json files there might be values to toggle with ease by clicking on
  // left-side glyphMarging menu
  "editor.glyphMargin": false,
  "editor.stickyScroll.enabled": true,
  "editor.stickyScroll.maxLineCount": 8, // üß™ Experiment
  "editor.minimap.renderCharacters": true,
  "editor.insertSpaces": false,
  "editor.wordWrap": "off",
  "workbench.view.alwaysShowHeaderActions": true,
  "workbench.editor.highlightModifiedTabs": true,
  "workbench.editor.tabSizing": "shrink",
  "workbench.tree.indent": 12,
  "workbench.colorCustomizations": {
    "inlineparameters.annotationBackground": "#0000"
  },
  "workbench.editor.wrapTabs": true, // Useful when you have a lot of tabs open

  // üìü Terminal
  "terminal.integrated.copyOnSelection": true,
  "terminal.integrated.cursorBlinking": true,
  "terminal.integrated.smoothScrolling": false,
  "terminal.integrated.fontFamily": "IBM Plex Mono",
  "terminal.integrated.fontSize": 13,
  "terminal.integrated.lineHeight": 1.2,

  /*
===============================================================================
 üßò Editing Experience 
=============================================================================*/
  // üßò Formatting
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.formatOnPaste": true, // This saves your sanity when you copy-n-paste code from the internet
  "editor.formatOnSave": true,
  "editor.formatOnType": false,
  "editor.formatOnSaveMode": "file", // required to format on save
  "files.insertFinalNewline": true, // I's a common practice to insert new-line character at the end of the file
  "eslint.validate": ["javascript", "typescript"],
  /*
===============================================================================
 üëê VIM  
=============================================================================*/
  "vim.easymotion": true,
  "vim.incsearch": true,
  "vim.useSystemClipboard": true,
  "vim.useCtrlKeys": true,
  "vim.hlsearch": true,
  "vim.leader": ",",
  "vim.sneakUseIgnorecaseAndSmartcase": true,
  "vim.sneak": true,
  "vim.highlightedyank.enable": true,
  "vim.highlightedyank.color": "rgba(50, 100, 170, 0.5)", // rgba(50, 100, 170, 0.5), rgba(50, 50, 170, 0.5)
  "vim.surround": true,
  "vim.insertModeKeyBindings": [{ "before": ["j", "k"], "after": ["<ESC>"] }],
  "editor.wordSeparators": "`~!@#$%^&*()=+[{]}\\|;:'\",.<>/?", // üß™ Experiment
  "editor.cursorSurroundingLines": 0, // üß™ Experiment
  // pairing colors
  // bg: #1F0322, fg: #E2CFEA,
  // bg: #433633, fg: #9BC1BC,
  // bg: #433633, fg: #44CFCB,
  // bg: #2C0E37, fg: #85FFC7,
  "vim.easymotionMarkerBackgroundColor": "#4C3654",
  "vim.easymotionMarkerForegroundColorOneChar": "#85FFC7",
  "vim.easymotionMarkerFontWeight": "bold",
  "vim.easymotionMarkerForegroundColorTwoCharFirst": "#ffb400",
  "vim.easymotionMarkerForegroundColorTwoCharSecond": "#b98300",
  "vim.easymotionDimBackground": true,
  "vim.normalModeKeyBindingsNonRecursive": [
    { "before": ["leader", "w"], "commands": ["workbench.action.files.save"] },
    { "before": ["<leader>", "c"], "commands": ["editor.action.commentLine"] }, // toggle comment selection
    { "before": ["<leader>", "d"], "after": ["d", "d"] }, // delete a single line
    { "before": ["x"], "after": ["\"", "_", "x"] }, // delete single character
    // Modals
    {
      "before": ["leader", "p"],
      "commands": ["workbench.action.showCommands"]
    },
    { "before": ["<Leader>", "f"], "commands": ["workbench.action.quickOpen"] },
    {
      "before": ["<Leader>", "r"],
      "commands": ["workbench.action.gotoSymbol"]
    },
    // splits
    { "before": ["leader", "v"], "commands": [":vsplit"] },
    { "before": ["leader", "s"], "commands": [":split"] },
    // panes navigation
    {
      "before": ["leader", "h"],
      "commands": ["workbench.action.focusLeftGroup"]
    },
    {
      "before": ["leader", "j"],
      "commands": ["workbench.action.focusBelowGroup"]
    },
    {
      "before": ["leader", "k"],
      "commands": ["workbench.action.focusAboveGroup"]
    },
    {
      "before": ["leader", "l"],
      "commands": ["workbench.action.focusRightGroup"]
    },
    { "before": ["<ESC>"], "after": [], "commands": [{ "command": ":nohl" }] },
    { "before": ["<C-n>"], "commands": [":nohl"] },
    { "before": ["<Leader>", "/"], "commands": [":noh"] }
  ],
  "vim.visualModeKeyBindings": [
    { "before": [">"], "commands": ["editor.action.indentLines"] },
    { "before": ["<"], "commands": ["editor.action.outdentLines"] },
    { "before": ["J"], "commands": ["editor.action.moveLinesDownAction"] }, // Move selected lines while staying in visual mode
    { "before": ["K"], "commands": ["editor.action.moveLinesUpAction"] }
  ],
  "vim.normalModeKeyBindings": [
    {
      "before": ["<leader>", "e"],
      "commands": ["workbench.view.explorer"]
    },
    { "before": ["<leader>", "m"], "commands": ["bookmarks.toggle"] },
    { "before": ["<leader>", "b"], "commands": ["bookmarks.list"] },
    {
      "before": ["g", "p", "d"],
      "commands": ["editor.action.peekDefinition"]
    },
    {
      "before": ["g", "h"],
      "commands": ["editor.action.showDefinitionPreviewHover"]
    },
    {
      "before": ["g", "i"],
      "commands": ["editor.action.goToImplementation"]
    },
    {
      "before": ["g", "p", "i"],
      "commands": ["editor.action.peekImplementation"]
    },
    {
      "before": ["g", "q"],
      "commands": ["editor.action.quickFix"]
    },
    {
      "before": ["g", "r"],
      "commands": ["editor.action.referenceSearch.trigger"]
    },
    {
      "before": ["g", "t"],
      "commands": ["editor.action.goToTypeDefinition"]
    },
    {
      "before": ["g", "p", "t"],
      "commands": ["editor.action.peekTypeDefinition"]
    }
  ],
  "vim.operatorPendingModeKeyBindingsNonRecursive": [
    // Bind ( to 'i(' in operator pending mode makes 'y(' and 'c(' work like 'yi(' and 'ci(' respectively:
    { "before": ["("], "after": ["i("] }
  ],
  "vim.operatorPendingModeKeyBindings": [
    // Bind { to w in operator pending mode makes y{ and d{ work like yw and dw respectively:
    { "before": ["{"], "after": ["w"] },
    // Bind L to $ and H to ^ in operator pending mode makes yL and dH work like y$ and d^ respectively:
    { "before": ["L"], "after": ["$"] },
    { "before": ["H"], "after": ["^"] }
  ],
  "vim.visualModeKeyBindingsNonRecursive": [
    // Bind p in visual mode to paste without overriding the current register:
    { "before": ["p"], "after": ["p", "g", "v", "y"] }
  ],
  "vim.handleKeys": {
    "<C-a>": false,
    "<C-f>": false
  },
  "extensions.experimental.affinity": {
    "vscodevim.vim": 1 // To improve performance
  },

  /*
===============================================================================
 ü¶¶ Other
=============================================================================*/
  "workbench.colorTheme": "Moonlight Italic",
  "workbench.iconTheme": "material-icon-theme",
  "git.autofetch": true,
  "git.confirmSync": false,
  "git.enableSmartCommit": true,
  "projectManager.sortList": "Recent",
  "redhat.telemetry.enabled": true,
  // Moves files/folders to the OS trash (recycle bin on Windows) when deleting.
  // Disabling this will delete files/folders permanently.
  "files.enableTrash": true,

  // üìä CodeMetrics Extension Settings
  // Let's keep it in jsx/tsx as well, as it can pin-point
  // complex functions in these files as well
  "codemetrics.basics.EnabledForJSX": true,
  "codemetrics.basics.EnabledForTSX": true,
  "codemetrics.basics.EnabledForHTML": false,

  "codemetrics.basics.CodeLensHiddenUnder": 8, // üß™ Experiment
  "codemetrics.basics.ComplexityLevelLowDescription": "\\(·µî·µï·µî)/",
  "codemetrics.basics.ComplexityLevelNormalDescription": "‚ôªÔ∏è (‚à©·µî·µï·µî)‚äÉ‚îÅ‚òÜÔæü.*ÔΩ•ÔΩ°Ôæü Consider Refactor",
  "codemetrics.basics.ComplexityLevelHighDescription": "üé© ¬Ø\\(¬∞_o)‚äÉ‚îÅ‚òÜÔæü.*ÔΩ•ÔΩ° Wizardry needed",
  "codemetrics.basics.ComplexityLevelExtremeDescription": "üòµ‚Äçüí´ (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª Help!",
  // Other cool textmojis
  // (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª   the fuck
  // „ÉΩ(ÔΩÄ‚åí¬¥)Ôæâ        angry
  // \_(„ÉÑ)_/¬Ø       dunno
  // \_(-_-)_/       dunno
  // ¬Ø\(¬∞_o)/¬Ø        dunno
  // (“Ç‚ó°_‚ó°)          injured life
  // (‚à©·µî·µï·µî)‚äÉ‚îÅ‚òÜÔæü.*ÔΩ•ÔΩ°Ôæü wizard
  // \(·µî·µï·µî)/         happy
  // (~Àò‚ñæÀò)~         everything is fine
  // (‚à©·µî·µï·µî)‚äÉ‚îÅ‚òÜÔæü.*ÔΩ•ÔΩ° . ›Å‚Çä ‚äπ . ›Å ‚ü° ›Å . ‚äπ ‚Çä ›Å.

  // üëÄ I will have to experiment with these along the way
  // observing what I would call a complexity
  "codemetrics.nodeconfiguration.ReturnStatement": 0,
  "codemetrics.nodeconfiguration.CaseClause": 0,
  "codemetrics.nodeconfiguration.DefaultClause": 0,
  "codemetrics.nodeconfiguration.FunctionDeclaration": 0,
  "codemetrics.nodeconfiguration.ArrowFunction": 0,
  "codemetrics.nodeconfiguration.JsxElement": 0,
  "codemetrics.nodeconfiguration.JsxSelfClosingElement": 0,
  "editor.inlineSuggest.enabled": true,
  "terminal.integrated.env.osx": {},
  "gitlens.views.commitDetails.files.layout": "list",
  "[python]": {
    "editor.defaultFormatter": "ms-python.autopep8"
  },
  "diffEditor.ignoreTrimWhitespace": false,
  "git.ignoreRebaseWarning": true,
  "gitlens.gitCommands.skipConfirmations": [
    "fetch:command",
    "switch:command",
    "stash-push:command"
  ],
  "workbench.editor.tabActionCloseVisibility": false,

  /*
===============================================================================
 üôä Language Specific Settings 
=============================================================================*/
  "typescript.updateImportsOnFileMove.enabled": "always",
  "javascript.updateImportsOnFileMove.enabled": "always",
  "yaml.schemas": {
    "file:///Users/stanislavvarga/.vscode/extensions/atlassian.atlascode-3.0.3/resources/schemas/pipelines-schema.json": "bitbucket-pipelines.yml"
  },
  "emmet.triggerExpansionOnTab": true,
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "tailwindCSS.includeLanguages": {
    "javascriptreact": "html",
    "typescriptreact": "html",
    "plaintext": "html"
  },
  /*
===============================================================================
üóÑÔ∏è File Associations 
=============================================================================*/
  "files.associations": {
    "*.json": "json",
    "Dockerfile-*": "dockerfile"
  },
  "[json]": {
    "editor.glyphMargin": true,
    // "editor.defaultFormatter": "esbenp.prettier-vscode"
    "editor.formatOnSave": false
  },
  "[makefile]": {
    "editor.insertSpaces": false,
    "editor.detectIndentation": false
  },
  "[javascriptreact]": {
    "editor.formatOnSave": true
  },
  "[markdown]": {
    "editor.formatOnSave": false
  },
  "[html]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "window.zoomLevel": 1,
  "jest.runMode": "on-demand",
  "markdown-preview-enhanced.previewTheme": "github-dark.css",
  "markdown-preview-enhanced.codeBlockTheme": "twilight.css",
  "markdown-preview-enhanced.scrollSync": false,
  "security.promptForLocalFileProtocolHandling": false,
  "diffEditor.experimental.showMoves": true,
  "sonarlint.connectedMode.connections.sonarcloud": [
    {
      "organizationKey": "itera-cloud",
      "connectionId": "VSCodeSonarCloudLocal"
    }
  ],
  "diffEditor.hideUnchangedRegions.enabled": true
}
